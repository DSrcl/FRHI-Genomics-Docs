{
  "resourceType": "StructureDefinition",
  "id": "valueset-sdc-de-dataelementexchangevalueset",
  "text": {
    "status": "generated",
    "div": "<div>to do</div>"
  },
  "url": "http://hl7.org/fhir/StructureDefinition/valueset-sdc-de-dataelementexchangevalueset",
  "name": "Structured Data Capture Data Element Exchange Value Set",
  "publisher": "Health Level Seven International (Orders and Observations - Structured Data Capture)",
  "contact": [
    {
      "telecom": [
        {
          "system": "other",
          "value": "http://wiki.siframework.org/Structured+Data+Capture+Initiative"
        }
      ]
    }
  ],
  "description": "Defines how ValueSet is used to reflect code lists found in data element defintions for exchange and maintenance between data element registries according to requirements established by the ONC's Structured Data Capture standard.",
  "status": "draft",
  "date": "2014-07-06",
  "kind": "resource",
  "constrainedType": "ValueSet",
  "abstract": false,
  "base": "http://hl7.org/fhir/StructureDefinition/ValueSet",
  "snapshot": {
    "element": [
      {
        "path": "ValueSet",
        "name": "DataElementExchangeValueSet",
        "short": "A set of codes drawn from one or more code systems",
        "definition": "A value set specifies a set of codes drawn from one or more code systems.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "ValueSet"
          }
        ],
        "constraint": [
          {
            "key": "vsd-7",
            "severity": "error",
            "human": "A defined code system (if present) SHALL have a different identifier to the value set itself",
            "xpath": "not(f:define/f:system/@value = f:identifier/@value)"
          },
          {
            "key": "vsd-2",
            "severity": "error",
            "human": "A value set with only one import SHALL also have an include and/or an exclude unless the value set defines its own codes",
            "xpath": "not(exists(f:compose)) or (count(f:compose/f:import)!=1 or exists(f:compose/f:include) or exists(f:compose/f:exclude) or exists(f:define))"
          },
          {
            "key": "vsd-5",
            "severity": "error",
            "human": "Value set SHALL contain either a define, a compose, or an expansion element",
            "xpath": "exists(f:define) or exists(f:compose) or exists(f:expansion)"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.id",
        "short": "Logical id of this artifact",
        "definition": "The logical id of the resource, as used in the url for the resource. Once assigned, this value never changes.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ]
      },
      {
        "path": "ValueSet.meta",
        "short": "Metadata about the resource",
        "definition": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.meta",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Meta"
          }
        ]
      },
      {
        "path": "ValueSet.implicitRules",
        "short": "A set of rules under which this content was created",
        "definition": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.implicitRules",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "isModifier": true
      },
      {
        "path": "ValueSet.language",
        "short": "Language of the resource content",
        "definition": "The base language in which the resource is written.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.language",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "binding": {
          "strength": "required",
          "description": "A human language",
          "valueSetUri": "http://tools.ietf.org/html/bcp47"
        }
      },
      {
        "path": "ValueSet.text",
        "short": "Text summary of the resource, for human interpretation",
        "definition": "A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
        "alias": [
          "narrative",
          "html",
          "xhtml",
          "display"
        ],
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.text",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Narrative"
          }
        ],
        "condition": [
          "dom-1"
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "Act.text?"
          }
        ]
      },
      {
        "path": "ValueSet.contained",
        "short": "Contained, inline Resources",
        "definition": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
        "alias": [
          "inline resources",
          "anonymous resources",
          "contained resources"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.contained",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Resource"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        },
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ]
      },
      {
        "path": "ValueSet.extension",
        "name": "category",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-category"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "trustedExpansion",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-trusted-expansion"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "effectiveDate",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "expirationDate",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-expirationDate"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.url",
        "short": "Globally unique logical id for  value set",
        "definition": "An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.url",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.identifier",
        "short": "Additional identifier for the value set (v2 / CDA)",
        "definition": "Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.identifier",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Identifier"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "define.xml2.0",
            "map": "Identifier part"
          }
        ]
      },
      {
        "path": "ValueSet.version",
        "short": "Logical id for this version of the value set",
        "definition": "Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.version",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.name",
        "short": "Informal name for this value set",
        "definition": "A free text natural language name describing the value set.",
        "requirements": "Support human navigation.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.name",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.useContext",
        "short": "Content intends to support these contexts",
        "definition": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of value set definitions.",
        "requirements": "Assist in searching for appropriate content.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.useContext",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "CodeableConcept"
          }
        ],
        "isSummary": true,
        "binding": {
          "strength": "extensible",
          "description": "Indicates the countries, regions, disciplines and other aspects of use this artifact is targeted for use within",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/use-context"
          }
        },
        "mapping": [
          {
            "identity": "define.xml2.0",
            "map": "COMPONENT, PROPERTY, TIME_ASPCT, SYSTEM, SCALE_TYP, METHOD_TYP, CLASS, CLASSTYPE, ORDER_OBS, DOCUMENT_SECTION, HL7_ATTACHMENT_STRUCTURE"
          }
        ]
      },
      {
        "path": "ValueSet.immutable",
        "short": "Indicates whether or not any change to the content logical definition may occur",
        "definition": "If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.immutable",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.publisher",
        "short": "Name of the publisher (Organization or individual)",
        "definition": "The name of the individual or organization that published the value set.",
        "requirements": "Helps establish the \"authority/credibility\" of the value set.  May also allow for contact.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.publisher",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.contact",
        "short": "Contact details of the publisher",
        "definition": "Contacts to assist a user in finding and communicating with the publisher.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.contact",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "isSummary": true
      },
      {
        "path": "ValueSet.contact.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.contact.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.contact.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.contact.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.contact.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.contact.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.contact.name",
        "short": "Name of a individual to contact",
        "definition": "The name of an individual to contact regarding the value set.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.contact.name",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "isSummary": true
      },
      {
        "path": "ValueSet.contact.telecom",
        "short": "Contact details for individual or publisher",
        "definition": "Contact details for individual (if a name was provided) or the publisher.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.contact.telecom",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "ContactPoint"
          }
        ],
        "isSummary": true
      },
      {
        "path": "ValueSet.description",
        "short": "Human language description of the value set",
        "definition": "A free text natural language description of the use of the value set - reason for definition, \"the semantic space\" to be included in the value set, conditions of use, etc. The description may include a list of expected usages for the value set and can also describe the approach taken to build the value set.",
        "requirements": "Human understandability.",
        "alias": [
          "Scope",
          "Purpose"
        ],
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.description",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.requirements",
        "short": "Why is this needed?",
        "definition": "Explains why this value set is needed and why it's been constrained as it has.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.requirements",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ]
      },
      {
        "path": "ValueSet.copyright",
        "short": "Use and/or Publishing restrictions",
        "definition": "A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.",
        "alias": [
          "License",
          "Restrictions"
        ],
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.copyright",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ]
      },
      {
        "path": "ValueSet.status",
        "short": "draft | active | retired",
        "definition": "The status of the value set.",
        "requirements": "Identify when/if the value set should be used.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.status",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "isModifier": true,
        "isSummary": true,
        "binding": {
          "strength": "required",
          "description": "The lifecycle status of a Value Set or Concept Map",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/conformance-resource-status"
          }
        },
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.experimental",
        "short": "If for testing purposes, not real usage",
        "definition": "This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.experimental",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.extensible",
        "short": "Whether this is intended to be used with an extensible binding",
        "definition": "Whether this is intended to be used with an extensible binding or not.",
        "requirements": "It is not required to say whether this intent applies.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.extensible",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.date",
        "short": "Date for given status",
        "definition": "The date that the value set status was last changed.",
        "requirements": "Need to know when a value set was first legal for use or became withdrawn or replaced.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.date",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "dateTime"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.lockedDate",
        "short": "Fixed date for all referenced code systems and value sets",
        "definition": "If a Locked Date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value sets as of the Locked Date.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.lockedDate",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "date"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.codeSystem",
        "short": "An inline code system - part of this value set",
        "definition": "A definition of an code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to it's (codeSystem.system) directly.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-5"
        ],
        "constraint": [
          {
            "key": "vsd-8",
            "severity": "error",
            "human": "Codes must be unique",
            "xpath": "count(descendant::f:concept)=count(distinct-values(descendant::f:concept/f:code/@value))"
          },
          {
            "key": "vsd-3",
            "severity": "error",
            "human": "Within a code system definition, all the codes SHALL be unique",
            "xpath": "count(distinct-values(descendant::f:concept/f:code/@value))=count(descendant::f:concept)"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.codeSystem.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.system",
        "short": "URI to identify the code system (e.g. in Coding.system)",
        "definition": "An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.system",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.codeSystem.version",
        "short": "Version (for use in Coding.version)",
        "definition": "The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.version",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.codeSystem.caseSensitive",
        "short": "If code comparison is case sensitive",
        "definition": "If code comparison is case sensitive when codes within this system are compared to each other.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.caseSensitive",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true,
        "isSummary": true
      },
      {
        "path": "ValueSet.codeSystem.concept",
        "name": "concept",
        "short": "Concepts in the code system",
        "definition": "Concepts that are in the code system. The concept definitions are inherently heirarchical, but the definitions must be consulted to determine what the meaning of the heirachical relationships are.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        },
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.extension",
        "name": "conceptConceptOrder",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.code",
        "short": "Code that identifies concept",
        "definition": "A code - a text symbol - that uniquely identifies the concept within the code system.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.code",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.abstract",
        "short": "If this code is not for use as a real concept",
        "definition": "If this code is not for use as a real concept.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.abstract",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "defaultValueBoolean": false,
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.display",
        "short": "Text to Display to the user",
        "definition": "A human readable string that is the recommended default way to present this concept to a user.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.display",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.definition",
        "short": "Formal Definition",
        "definition": "The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, but they are highly recommended, as without them there is no formal meaning associated with the concept.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.definition",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.designation",
        "name": "designation",
        "short": "Additional representations for the concept",
        "definition": "Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.",
        "requirements": "many concept definition systems support mltiple representations, in multiple languages, and for mltiple purposes.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.language",
        "short": "Human language of the designation",
        "definition": "The language this designation is defined for.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.language",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "binding": {
          "strength": "required",
          "description": "A human language",
          "valueSetUri": "http://tools.ietf.org/html/bcp47"
        }
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.use",
        "short": "Details how this designation would be used",
        "definition": "A code that details how this designation would be used.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.use",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Coding"
          }
        ],
        "binding": {
          "strength": "extensible",
          "description": "Details of how a designation would be used",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/designation-use"
          }
        }
      },
      {
        "path": "ValueSet.codeSystem.concept.designation.value",
        "short": "The text value for this designation",
        "definition": "The text value for this designation.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.codeSystem.concept.designation.value",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ]
      },
      {
        "path": "ValueSet.codeSystem.concept.concept",
        "short": "Child Concepts (is-a / contains / categorises)",
        "definition": "Child Concepts - a heirarchy of concepts. The nature of the relationships is variable (is-a / contains / categorises) and can only be determined by examining the definitions of the concepts.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.codeSystem.concept.concept",
          "min": 0,
          "max": "*"
        },
        "nameReference": "concept",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose",
        "short": "When value set includes codes from elsewhere",
        "definition": "A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-5"
        ],
        "constraint": [
          {
            "key": "vsd-1",
            "severity": "error",
            "human": "A value set composition SHALL have an include or an import",
            "xpath": "exists(f:include) or exists(f:import)"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.import",
        "short": "Import the contents of another value set",
        "definition": "Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.import",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "condition": [
          "vsd-1"
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include",
        "name": "include",
        "short": "Include one or more codes from a code system",
        "definition": "Include one or more codes from a code system.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-1"
        ],
        "constraint": [
          {
            "key": "vsd-11",
            "severity": "error",
            "human": "Cannot have both concept and filter",
            "xpath": "not(exists(f:concept)) or not(exists(f:filter))"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.system",
        "short": "The system the codes come from",
        "definition": "An absolute URI which is the code system from which the selected codes come from.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.system",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "define.xml2.0",
            "map": "ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Href"
          },
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.version",
        "short": "Specific version of the code system referred to",
        "definition": "The version of the code system that the codes are selected from.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.version",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "isSummary": true,
        "mapping": [
          {
            "identity": "define.xml2.0",
            "map": "ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Version"
          },
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept",
        "short": "A concept defined in the system",
        "definition": "Specifies a concept to be included or excluded.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.concept",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-11"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.concept.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        },
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.concept.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.extension",
        "name": "conceptConceptOrder",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.concept.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.concept.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.concept.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.code",
        "short": "Code or expression from system",
        "definition": "Specifies a code for the concept to be included or excluded.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.concept.code",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.display",
        "short": "Test to display for this code for this value set",
        "definition": "The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.concept.display",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.concept.designation",
        "short": "Additional representations for this valueset",
        "definition": "Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.concept.designation",
          "min": 0,
          "max": "*"
        },
        "nameReference": "designation"
      },
      {
        "path": "ValueSet.compose.include.filter",
        "short": "Select codes/concepts by their properties (including relationships)",
        "definition": "Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.filter",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-11"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.filter.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.filter.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.include.filter.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.property",
        "short": "A property defined by the code system",
        "definition": "A code that identifies a property defined in the code system.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.filter.property",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.op",
        "short": "= | is-a | is-not-a | regex | in | not-in",
        "definition": "The kind of operation to perform as a part of the filter criteria.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.filter.op",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "The kind of operation to perform as a part of a property based filter",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/filter-operator"
          }
        },
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.include.filter.value",
        "short": "Code from the system, or regex criteria",
        "definition": "The match value may be either a code defined by the system, or a string value which is used a regex match on the literal string of the property value.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.compose.include.filter.value",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.compose.exclude",
        "short": "Explicitly exclude codes",
        "definition": "Exclude one or more codes from the value set.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.compose.exclude",
          "min": 0,
          "max": "*"
        },
        "nameReference": "include",
        "condition": [
          "vsd-2"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.expansion",
        "short": "Used when the value set is \"expanded\"",
        "definition": "A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "condition": [
          "vsd-5"
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.identifier",
        "short": "Uniquely identifies this expansion",
        "definition": "An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.identifier",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.timestamp",
        "short": "Time valueset expansion happened",
        "definition": "The time at which the expansion was produced by the expanding system.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.timestamp",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "dateTime"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.total",
        "short": "Total number of codes in the expansion",
        "definition": "The total nober of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.total",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "integer"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.offset",
        "short": "Offset at which this resource starts",
        "definition": "If paging is being used, the offset at which this resource starts - e.g. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.offset",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "integer"
          }
        ],
        "meaningWhenMissing": "Paging is not being used"
      },
      {
        "path": "ValueSet.expansion.parameter",
        "short": "Parameter that controlled the expansion process",
        "definition": "A Parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.parameter",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.parameter.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.parameter.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.parameter.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.parameter.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.parameter.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.parameter.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.parameter.name",
        "short": "Name as assigned by server",
        "definition": "The name of the parameter.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.parameter.name",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.parameter.value[x]",
        "short": "Value of the named parameter",
        "definition": "The value of the parameter.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.parameter.value[x]",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          },
          {
            "code": "boolean"
          },
          {
            "code": "integer"
          },
          {
            "code": "decimal"
          },
          {
            "code": "uri"
          },
          {
            "code": "code"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.contains",
        "name": "contains",
        "short": "Codes in the value set",
        "definition": "The codes that are contained in the value set expansion.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.contains",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "constraint": [
          {
            "key": "vsd-6",
            "severity": "error",
            "human": "SHALL have a code or a display",
            "xpath": "exists(f:code) or exists(f:display)"
          },
          {
            "key": "vsd-9",
            "severity": "error",
            "human": "Must have a code if not abstract",
            "xpath": "exists(f:code) or (f:abstract/@value = 'true')"
          },
          {
            "key": "vsd-10",
            "severity": "error",
            "human": "Must have a system if a code is present",
            "xpath": "exists(f:system) or not(exists(f:code))"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        },
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.contains.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "conceptConceptOrder",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "definition",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-definition"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "systemName",
        "short": "Extension",
        "definition": "An Extension",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-systemName"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.contains.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "ValueSet.expansion.contains.system",
        "short": "System value for the code",
        "definition": "An absolute URI which is the code system in which the code for this item in the expansion is defined.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.system",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.abstract",
        "short": "If user cannot select this entry",
        "definition": "If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.abstract",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.version",
        "short": "Version in which this code / display is defined",
        "definition": "The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.version",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.code",
        "short": "Code - if blank, this is not a choosable code",
        "definition": "The code for this item in the expansion heirarchy. If this code is missing the entry in the heirarchy is a place holder (abstract) and doesn't represent a valid code in the value set.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.code",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "condition": [
          "vsd-6"
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.display",
        "short": "User display for the concept",
        "definition": "The recommended display for this item in the expansion.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "ValueSet.expansion.contains.display",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "condition": [
          "vsd-6"
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.contains",
        "short": "Codes contained under this entry",
        "definition": "Other codes and entries contained under this entry in the heirarchy.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "ValueSet.expansion.contains.contains",
          "min": 0,
          "max": "*"
        },
        "nameReference": "contains",
        "mustSupport": true
      }
    ]
  },
  "differential": {
    "element": [
      {
        "path": "ValueSet",
        "name": "DataElementExchangeValueSet",
        "min": 0,
        "max": "*",
        "type": [
          {
            "code": "ValueSet"
          }
        ]
      },
      {
        "path": "ValueSet.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        }
      },
      {
        "path": "ValueSet.extension",
        "name": "category",
        "min": 0,
        "max": "*",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-category"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "trustedExpansion",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-trusted-expansion"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "effectiveDate",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extension",
        "name": "expirationDate",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-expirationDate"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.url",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.identifier",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "Identifier"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.version",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.name",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.immutable",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.publisher",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.status",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.experimental",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.extensible",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.date",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "dateTime"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.lockedDate",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "date"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.system",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.version",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.caseSensitive",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept",
        "name": "concept",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        }
      },
      {
        "path": "ValueSet.codeSystem.concept.extension",
        "name": "conceptConceptOrder",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.code",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.abstract",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.display",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.definition",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.codeSystem.concept.concept",
        "min": 0,
        "max": "*",
        "nameReference": "concept",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.import",
        "min": 0,
        "max": "*",
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include",
        "name": "include",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.system",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.version",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.concept",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.concept.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        }
      },
      {
        "path": "ValueSet.compose.include.concept.extension",
        "name": "conceptConceptOrder",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.concept.code",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.concept.display",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.filter",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.filter.property",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.filter.op",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.include.filter.value",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.compose.exclude",
        "min": 0,
        "max": "*",
        "nameReference": "include",
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.timestamp",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "dateTime"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains",
        "name": "contains",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        }
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "conceptConceptOrder",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "definition",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-definition"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.extension",
        "name": "systemName",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/valueset-systemName"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.system",
        "min": 1,
        "max": "1",
        "type": [
          {
            "code": "uri"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.abstract",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.version",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.code",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.display",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true
      },
      {
        "path": "ValueSet.expansion.contains.contains",
        "min": 0,
        "max": "*",
        "nameReference": "contains",
        "mustSupport": true
      }
    ]
  }
}