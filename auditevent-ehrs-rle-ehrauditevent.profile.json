{
  "resourceType": "StructureDefinition",
  "id": "auditevent-ehrs-rle-ehrauditevent",
  "text": {
    "status": "generated",
    "div": "<div>to do</div>"
  },
  "url": "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-ehrauditevent",
  "name": "EHRS FM Record Lifecycle Event - Audit Event",
  "publisher": "Health Level Seven International (Electronic Health Record)",
  "contact": [
    {
      "telecom": [
        {
          "system": "other",
          "value": "http://hl7.org/special/committees/ehr.html"
        }
      ]
    }
  ],
  "description": "Defines the elements to be supported within the AuditEvent resource in order to conform with the Electronic Health Record System Functional Model Record Lifecycle Event standard",
  "status": "draft",
  "date": "2014-12-04",
  "kind": "resource",
  "constrainedType": "AuditEvent",
  "abstract": false,
  "base": "http://hl7.org/fhir/StructureDefinition/AuditEvent",
  "snapshot": {
    "element": [
      {
        "path": "AuditEvent",
        "name": "EHRAuditEvent",
        "short": "Event record kept for security purposes",
        "definition": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "AuditEvent"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "Message"
          },
          {
            "identity": "rim",
            "map": "ControlAct[moodCode=EVN]"
          }
        ]
      },
      {
        "path": "AuditEvent.id",
        "short": "Logical id of this artifact",
        "definition": "The logical id of the resource, as used in the url for the resource. Once assigned, this value never changes.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ]
      },
      {
        "path": "AuditEvent.meta",
        "short": "Metadata about the resource",
        "definition": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.meta",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Meta"
          }
        ]
      },
      {
        "path": "AuditEvent.implicitRules",
        "short": "A set of rules under which this content was created",
        "definition": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.implicitRules",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "isModifier": true
      },
      {
        "path": "AuditEvent.language",
        "short": "Language of the resource content",
        "definition": "The base language in which the resource is written.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.language",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "binding": {
          "strength": "required",
          "description": "A human language",
          "valueSetUri": "http://tools.ietf.org/html/bcp47"
        }
      },
      {
        "path": "AuditEvent.text",
        "short": "Text summary of the resource, for human interpretation",
        "definition": "A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
        "alias": [
          "narrative",
          "html",
          "xhtml",
          "display"
        ],
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.text",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Narrative"
          }
        ],
        "condition": [
          "dom-1"
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "Act.text?"
          }
        ]
      },
      {
        "path": "AuditEvent.contained",
        "short": "Contained, inline Resources",
        "definition": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
        "alias": [
          "inline resources",
          "anonymous resources",
          "contained resources"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.contained",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Resource"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.event",
        "short": "What was done",
        "definition": "Identifies the name, action type, time, and disposition of the audited event.",
        "requirements": "The event must be identified.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.event",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "EventIdentification"
          },
          {
            "identity": "rim",
            "map": "N/A (no nesting in v3)"
          }
        ]
      },
      {
        "path": "AuditEvent.event.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.event.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        },
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.event.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ]
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "location",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-location"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "reason",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-reason"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "policy",
        "short": "Extension",
        "definition": "An Extension",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-policy"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.event.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.event.type",
        "short": "Type/identifier of event",
        "definition": "Identifier for a family of the event.",
        "requirements": "This identifies the performed function. For \"Execute\" Event Action Code audit records, this identifies the application function performed.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.type",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "CodeableConcept"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "extensible",
          "description": "Type of event",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-event-type"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventId"
          },
          {
            "identity": "rim",
            "map": ".code (type, subtype and action are pre-coordinated or sent as translations)"
          }
        ]
      },
      {
        "path": "AuditEvent.event.subtype",
        "short": "More specific type/id for the event",
        "definition": "Identifier for the category of event.",
        "requirements": "This field enables queries of messages by implementation-defined event categories.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.event.subtype",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "CodeableConcept"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "extensible",
          "description": "Sub-type of event",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-event-sub-type"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventTypeCode"
          },
          {
            "identity": "rim",
            "map": ".code (type, subtype and action are pre-coordinated or sent as translations)"
          }
        ]
      },
      {
        "path": "AuditEvent.event.action",
        "short": "Type of action performed during the event",
        "definition": "Indicator for type of action performed during the event that generated the audit.",
        "requirements": "This broadly indicates what kind of action was done on the Participant Object.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.action",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "Indicator for type of action performed during the event that generated the audit.",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-event-action"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventActionCode"
          },
          {
            "identity": "rim",
            "map": ".code (type, subtype and action are pre-coordinated or sent as translations)"
          }
        ]
      },
      {
        "path": "AuditEvent.event.dateTime",
        "short": "Time when the event occurred on source",
        "definition": "The time when the event occurred on the source.",
        "requirements": "This ties an event to a specific date and time. Security audits typically require a consistent time base, e.g., UTC, to eliminate time-zone issues arising from geographical distribution.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.dateTime",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "instant"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventDateTime"
          },
          {
            "identity": "rim",
            "map": ".effectiveTime"
          }
        ]
      },
      {
        "path": "AuditEvent.event.outcome",
        "short": "Whether the event succeeded or failed",
        "definition": "Indicates whether the event succeeded or failed.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.outcome",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "binding": {
          "strength": "required",
          "description": "Indicates whether the event succeeded or failed",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-event-outcome"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventOutcomeIndicator"
          },
          {
            "identity": "rim",
            "map": ".actionNegationInd"
          }
        ]
      },
      {
        "path": "AuditEvent.event.outcomeDesc",
        "short": "Description of the event outcome",
        "definition": "A free text description of the outcome of the event.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.event.outcomeDesc",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "@EventOutcomeDescription"
          },
          {
            "identity": "rim",
            "map": ".outboundRelationship[typeCode=OUT].target.text"
          }
        ]
      },
      {
        "path": "AuditEvent.event.purposeOfEvent",
        "short": "The purposeOfUse of the event",
        "definition": "The purposeOfUse (reason) that was used during the event being recorded.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.event.purposeOfEvent",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Coding"
          }
        ]
      },
      {
        "path": "AuditEvent.participant",
        "short": "A person, a hardware device or software process",
        "definition": "A person, a hardware device or software process.",
        "requirements": "The event has one or more active participants.",
        "min": 1,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant",
          "min": 1,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "constraint": [
          {
            "key": "sev-3",
            "severity": "error",
            "human": "Either a userId or a reference, but not both",
            "xpath": "exists(f:userId) != exists(f:reference)"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "ActiveParticipant"
          },
          {
            "identity": "rim",
            "map": ".participation"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.role",
        "short": "User roles (e.g. local RBAC codes)",
        "definition": "Specification of the role(s) the user plays when performing the event. Usually the codes used in this element are local codes defined by the role-based access control security system used in the local context.",
        "requirements": "This value ties an audited event to a user's role(s). It is an optional value that might be used to group events for analysis by user functional role categories.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.role",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "CodeableConcept"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "extensible",
          "description": "Role(s) the user plays (from RBAC)",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/dicm-402-roleid"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "RoleIdCode"
          },
          {
            "identity": "rim",
            "map": ".typeCode and/or .functionCode"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.reference",
        "short": "Direct reference to resource",
        "definition": "Direct reference to a resource that identifies the participant.",
        "requirements": "This field ties an audit event to a specific resource.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.reference",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Practitioner"
            ]
          },
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Organization"
            ]
          },
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Device"
            ]
          },
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Patient"
            ]
          },
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/RelatedPerson"
            ]
          }
        ],
        "condition": [
          "sev-3"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": ".role"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.userId",
        "short": "Unique identifier for the user",
        "definition": "Unique identifier for the user actively participating in the event.",
        "requirements": "This field ties an audit event to a specific user.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.userId",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "condition": [
          "sev-3"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@UserId"
          },
          {
            "identity": "rim",
            "map": ".id"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.altId",
        "short": "Alternative User id e.g. authentication",
        "definition": "Alternative Participant Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g., single sign-on), if available.",
        "requirements": "In some situations a human user may authenticate with one identity but, to access a specific application system, may use a synonymous identify. For example, some \"single sign on\" implementations will do this. The alternative identifier would then be the original identify  used for authentication, and the User ID is the one known to and used by the application.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.altId",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "@AlternativeUserId"
          },
          {
            "identity": "rim",
            "map": ".id (distinguish id type by root)"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.name",
        "short": "Human-meaningful name for the user",
        "definition": "Human-meaningful name for the user.",
        "requirements": "The User ID and Authorization User ID may be internal or otherwise obscure values. This field assists the auditor in identifying the actual user.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.name",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "@UserName"
          },
          {
            "identity": "rim",
            "map": ".name"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.requestor",
        "short": "Whether user is initiator",
        "definition": "Indicator that the user is or is not the requestor, or initiator, for the event being audited.",
        "requirements": "This value is used to distinguish between requestor-users and recipient-users. For example, one person may initiate a report-output to be sent to another user.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.requestor",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "boolean"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@UserIsRequestor"
          },
          {
            "identity": "rim",
            "map": "If participation.typeCode was author, then true"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.location",
        "short": "Where",
        "definition": "Where the event occurred.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.location",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Location"
            ]
          }
        ]
      },
      {
        "path": "AuditEvent.participant.policy",
        "short": "Policy that authorized event",
        "definition": "The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.",
        "requirements": "This value is used retrospectively to determine the authorization policies.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.policy",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "uri"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.media",
        "short": "Type of media",
        "definition": "Type of media involved. Used when the event is about exporting/importing onto media.",
        "requirements": "Usually, this is used instead of specifying a network address. This field is not used for Media Id (i.e. the serial number of a CD).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.media",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Coding"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "MediaType"
          },
          {
            "identity": "rim",
            "map": ".player.description.mediaType"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network",
        "short": "Logical network location for application activity",
        "definition": "Logical network location for application activity, if the activity has a network location.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.network",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "rim",
            "map": ".player.description.reference"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.network.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.network.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.network.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network.identifier",
        "short": "Identifier for the network access point of the user device",
        "definition": "An identifier for the network access point of the user device for the audit event.",
        "requirements": "This datum identifies the user's network access point, which may be distinct from the server that performed the action. It is an optional value that may be used to group events recorded on separate servers for analysis of a specific network access point's data access across all servers.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.network.identifier",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@NetworkAccessPointID"
          },
          {
            "identity": "rim",
            "map": "pre-coordinated into URL"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.network.type",
        "short": "The type of network access point",
        "definition": "An identifier for the type of network access point that originated the audit event.",
        "requirements": "This datum identifies the type of network access point identifier of the user device for the audit event. It is an optional value that may be used to group events recorded on separate servers for analysis of access according to a network access point's type.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.participant.network.type",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "The type of network access point of this participant in the audit event",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/network-type"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@NetworkAccessPointTypeCode"
          },
          {
            "identity": "rim",
            "map": "pre-coordinated into URL"
          }
        ]
      },
      {
        "path": "AuditEvent.participant.purposeOfUse",
        "short": "Participant purposeOfUse",
        "definition": "The purposeOfUse (reason) specific to this participant that was used during the event being recorded.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.participant.purposeOfUse",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Coding"
          }
        ]
      },
      {
        "path": "AuditEvent.source",
        "short": "Application systems and processes",
        "definition": "Application systems and processes.",
        "requirements": "The event is reported by one source.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.source",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "AuditSourceIdentification"
          },
          {
            "identity": "rim",
            "map": ".participation[typeCode=INF].role[classCode=ASSIGN].player[classCode=DEV, determinerCode=INSTANCE]"
          }
        ]
      },
      {
        "path": "AuditEvent.source.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.source.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.source.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.source.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.source.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.source.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.source.site",
        "short": "Logical source location within the enterprise",
        "definition": "Logical source location within the healthcare enterprise network.",
        "requirements": "This value differentiates among the sites in a multi-site enterprise health information system.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.source.site",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@AuditEnterpriseSiteId"
          },
          {
            "identity": "rim",
            "map": ".scopedRole[classCode=LOCE].player.desc"
          }
        ]
      },
      {
        "path": "AuditEvent.source.identifier",
        "short": "The id of source where event originated",
        "definition": "Identifier of the source where the event originated.",
        "requirements": "This field ties the event to a specific source system. It may be used to group events for analysis according to where the event occurred.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.source.identifier",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@AuditSourceId"
          },
          {
            "identity": "rim",
            "map": ".id"
          }
        ]
      },
      {
        "path": "AuditEvent.source.type",
        "short": "The type of source where event originated",
        "definition": "Code specifying the type of source where event originated.",
        "requirements": "This field indicates which type of source is identified by the Audit Source ID. It is an optional value that may be used to group events for analysis according to the type of source where the event occurred.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.source.type",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Coding"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "extensible",
          "description": "Code specifying the type of system that detected and recorded the event",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-source-type"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "AuditSourceTypeCode"
          },
          {
            "identity": "rim",
            "map": ".code"
          }
        ]
      },
      {
        "path": "AuditEvent.object",
        "short": "Specific instances of data or objects that have been accessed",
        "definition": "Specific instances of data or objects that have been accessed.",
        "requirements": "The event may have other objects involved.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "constraint": [
          {
            "key": "sev-1",
            "severity": "error",
            "human": "Either a name or a query (or both)",
            "xpath": "not(exists(f:name)) or not(exists(f:query))"
          },
          {
            "key": "sev-2",
            "severity": "error",
            "human": "Either an identifier or a reference, but not both",
            "xpath": "exists(f:identifier) != exists(f:reference)"
          }
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "ParticipantObjectIdentification"
          },
          {
            "identity": "rim",
            "map": ".outboundRelationship[typeCode=SUBJ].target  or  .participation[typeCode=SBJ].role"
          }
        ]
      },
      {
        "path": "AuditEvent.object.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.object.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.object.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.object.identifier",
        "short": "Specific instance of object (e.g. versioned)",
        "definition": "Identifies a specific instance of the participant object. The reference should always be version specific.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.identifier",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Identifier"
          }
        ],
        "condition": [
          "sev-2"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectID"
          },
          {
            "identity": "rim",
            "map": ".id.extension"
          }
        ]
      },
      {
        "path": "AuditEvent.object.reference",
        "short": "Specific instance of resource (e.g. versioned)",
        "definition": "Identifies a specific instance of the participant object. The reference should always be version specific.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.reference",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Reference",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/Resource"
            ]
          }
        ],
        "condition": [
          "sev-2"
        ],
        "mustSupport": true,
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectID"
          },
          {
            "identity": "rim",
            "map": "[self]"
          }
        ]
      },
      {
        "path": "AuditEvent.object.type",
        "short": "Type of object involved",
        "definition": "The type of the object that was involved in this audit event.",
        "requirements": "To describe the object being acted upon. In addition to queries on the subject of the action in an auditable event, it is also important to be able to query on the object type for the action.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.type",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "Code for the object type involved audited",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/object-type"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectTypeCode"
          },
          {
            "identity": "rim",
            "map": "[self::Act].code or role.player.code"
          }
        ]
      },
      {
        "path": "AuditEvent.object.role",
        "short": "What role the Object played",
        "definition": "Code representing the functional application role of Participant Object being audited.",
        "requirements": "For some detailed audit analysis it may be necessary to indicate a more granular type of participant, based on the application role it serves.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.role",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "Code representing the role the Object played in the event",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/object-role"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectTypeCodeRole"
          },
          {
            "identity": "rim",
            "map": "role.code (not sure what this would mean for an Act)"
          }
        ]
      },
      {
        "path": "AuditEvent.object.lifecycle",
        "short": "Life-cycle stage for the object",
        "definition": "Identifier for the data life-cycle stage for the participant object.",
        "requirements": "Institutional policies for privacy and security may optionally fall under different accountability rules based on data life cycle. This provides a differentiating value for those cases.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.lifecycle",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "required",
          "description": "Identifier for the data life-cycle stage for the object",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/object-lifecycle"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectDataLifeCycle"
          },
          {
            "identity": "rim",
            "map": "target of ObservationEvent[code=\"lifecycle\"].value"
          }
        ]
      },
      {
        "path": "AuditEvent.object.sensitivity",
        "short": "Policy-defined sensitivity for the object",
        "definition": "Denotes policy-defined sensitivity for the Participant Object ID such as VIP, HIV status, mental health status or similar topics.",
        "requirements": "This field identifies a specific instance of an object, such as a patient, to detect/track privacy and security issues.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.sensitivity",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "CodeableConcept"
          }
        ],
        "mustSupport": true,
        "binding": {
          "strength": "example",
          "description": "The sensitivity of an object. May also encompass confidentiality and rudimentary access control (e.g. HCS)",
          "valueSetReference": {
            "reference": "http://hl7.org/fhir/ValueSet/audit-event-sensitivity"
          }
        },
        "mapping": [
          {
            "identity": "dicom",
            "map": "@ParticipantObjectSensitivity"
          },
          {
            "identity": "rim",
            "map": ".confidentialityCode"
          }
        ]
      },
      {
        "path": "AuditEvent.object.name",
        "short": "Instance-specific descriptor for Object",
        "definition": "An instance-specific descriptor of the Participant Object ID audited, such as a person's name.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.name",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "condition": [
          "sev-1"
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "ParticipantObjectName"
          },
          {
            "identity": "rim",
            "map": ".title"
          }
        ]
      },
      {
        "path": "AuditEvent.object.description",
        "short": "Descriptive text",
        "definition": "Text that describes the object in more detail.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.description",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "ParticipantObjectDescription"
          },
          {
            "identity": "rim",
            "map": ".text"
          }
        ]
      },
      {
        "path": "AuditEvent.object.query",
        "short": "Actual query for object",
        "definition": "The actual query for a query-type participant object.",
        "requirements": "For query events it may be necessary to capture the actual query input to the query process in order to identify the specific event. Because of differences among query implementations and data encoding for them, this is a base 64 encoded data blob. It may be subsequently decoded or interpreted by downstream audit analysis processing.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.query",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "base64Binary"
          }
        ],
        "condition": [
          "sev-1"
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "ParticipantObjectQuery"
          },
          {
            "identity": "rim",
            "map": "No mapping"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail",
        "short": "Additional Information about the Object",
        "definition": "Additional Information about the Object.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object.detail",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "BackboneElement"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "ParticipantObjectDetail"
          },
          {
            "identity": "rim",
            "map": ".inboundRelationship[typeCode=SUBJ].target[classCode=OBS, moodCode=EVN]"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "xml:id (or equivalent in JSON)",
        "definition": "unique id for the element within a resource (for internal references).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.detail.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "id"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail.extension",
        "short": "Additional Content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object.detail.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail.modifierExtension",
        "short": "Extensions that cannot be ignored",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "AuditEvent.object.detail.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail.type",
        "short": "Name of the property",
        "definition": "Name of the property.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.detail.type",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "string"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "@type"
          },
          {
            "identity": "rim",
            "map": ".code"
          }
        ]
      },
      {
        "path": "AuditEvent.object.detail.value",
        "short": "Property value",
        "definition": "Property value.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "AuditEvent.object.detail.value",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "code": "base64Binary"
          }
        ],
        "mapping": [
          {
            "identity": "dicom",
            "map": "@value"
          },
          {
            "identity": "rim",
            "map": ".value"
          }
        ]
      }
    ]
  },
  "differential": {
    "element": [
      {
        "path": "AuditEvent",
        "name": "EHRAuditEvent",
        "min": 0,
        "max": "*",
        "type": [
          {
            "code": "AuditEvent"
          }
        ]
      },
      {
        "path": "AuditEvent.event",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.extension",
        "slicing": {
          "discriminator": [
            "url"
          ],
          "ordered": false,
          "rules": "open"
        }
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "location",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-location"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "reason",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-reason"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.extension",
        "name": "policy",
        "min": 0,
        "max": "1",
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/StructureDefinition/auditevent-ehrs-rle-policy"
            ]
          }
        ],
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.type",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.subtype",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.action",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.event.dateTime",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant",
        "min": 1,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.role",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.reference",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.userId",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.requestor",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.network",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.network.identifier",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.participant.network.type",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.source",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.source.site",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.source.identifier",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.source.type",
        "min": 1,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object",
        "min": 0,
        "max": "*",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.identifier",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.reference",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.type",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.role",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.lifecycle",
        "min": 0,
        "max": "1",
        "mustSupport": true
      },
      {
        "path": "AuditEvent.object.sensitivity",
        "min": 0,
        "max": "1",
        "mustSupport": true
      }
    ]
  }
}